name: AI Attribution Check

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate AI% in PR description and compute diff
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            // 1) Read PR body (description), not comments
            const pr = context.payload.pull_request;
            const body = (pr && pr.body) ? pr.body : "";
            core.info("----- PR BODY BEGIN -----\n" + body + "\n----- PR BODY END -----");

            // 2) Find the specific line
            const line = body.split(/\r?\n/).find(l =>
              /^[-*]?\s*Estimated % of new\/changed code from AI/i.test(l)
            ) || "";

            if (!line) {
              core.setFailed("Missing 'Estimated % of new/changed code from AI' line in PR DESCRIPTION.");
            }
            if (line.includes("__")) {
              core.setFailed("Placeholder '__' found. Enter an integer 0â€“100 in the PR DESCRIPTION.");
            }

            // 3) Extract the integer **after the colon**
            const m = line.match(/:\s*([0-9]{1,3})\b/);
            if (!m) {
              core.setFailed("Missing integer after ':' on the Estimated % line.");
            }
            const ai = Number(m ? m[1] : NaN);
            if (!(ai >= 0 && ai <= 100)) {
              core.setFailed(`Invalid AI%: '${ai}'. Must be an integer between 0 and 100.`);
            }
            core.setOutput('ai_pct', String(ai));

            // 4) Compute added/deleted lines
            const base = pr.base.sha;
            const head = pr.head.sha;
            execSync(`git fetch --no-tags --prune --depth=1 origin +${base}:${base} +${head}:${head}`, { stdio: "inherit" });
            const diff = execSync(`git diff --numstat ${base} ${head}`, { encoding: 'utf8' });
            let add = 0, del = 0;
            diff.split(/\r?\n/).filter(Boolean).forEach(l => {
              const parts = l.trim().split(/\s+/);
              const a = parseInt(parts[0], 10); const d = parseInt(parts[1], 10);
              add += Number.isFinite(a) ? a : 0;
              del += Number.isFinite(d) ? d : 0;
            });
            core.setOutput('added', String(add));
            core.setOutput('deleted', String(del));

      - name: Comment JSON summary (runs even if validation failed)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const ai = core.getInput('ai_pct') || 'NaN';
            const added = core.getInput('added') || '0';
            const deleted = core.getInput('deleted') || '0';
            const summary = {
              declared_ai_pct: (isNaN(Number(ai)) ? null : Number(ai)),
              added_lines: Number(added),
              deleted_lines: Number(deleted)
            };
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: "AI Attribution Summary\n\n```json\n" + JSON.stringify(summary, null, 2) + "\n```"
            });
